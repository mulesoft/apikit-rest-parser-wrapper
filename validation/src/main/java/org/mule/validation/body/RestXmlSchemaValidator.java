/*
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */
package org.mule.validation.body;

import org.mule.validation.exception.BadRequestException;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.dom.DOMSource;
import javax.xml.validation.Schema;
import javax.xml.validation.Validator;
import org.mule.runtime.api.metadata.TypedValue;
import org.mule.runtime.core.api.util.xmlsecurity.XMLSecureFactories;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

public class RestXmlSchemaValidator extends BodyAsStringValidator implements BodyValidator {

  private final Schema schema;

  public RestXmlSchemaValidator(Schema schema) {
    this.schema = schema;
  }

  @Override
  public TypedValue validate(String charset, TypedValue payload) throws BadRequestException {
    validate(getPayloadAsString(payload.getValue(), charset));
    return payload;
  }


  public void validate(String payload) throws BadRequestException {
    try {
      Document data = loadDocument(new StringReader(payload));

      Validator validator = schema.newValidator();
      validator.validate(new DOMSource(data.getDocumentElement()));

    } catch (IOException | SAXException e) {
      throw new BadRequestException(e.getMessage());
    }

  }

  private static Document loadDocument(Reader reader) throws IOException {
    return loadDocument(new InputSource(reader));
  }

  /**
   * Loads the document from the <code>content</code>.
   *
   * @param source the content to load
   * @return the {@link Document} represents the DOM of the content
   */
  private static Document loadDocument(InputSource source) throws IOException {
    DocumentBuilderFactory factory = XMLSecureFactories.createDefault().getDocumentBuilderFactory();
    factory.setNamespaceAware(true);
    try {
      DocumentBuilder builder = factory.newDocumentBuilder();
      // Setting error handler to null to avoid logs generated by the parser.
      builder.setErrorHandler(null);
      return builder.parse(source);
    } catch (ParserConfigurationException e) {
      throw new IOException("An internal operation failed.", e);
    } catch (SAXException e) {
      throw new IOException("An internal operation failed.", e);
    }
  }

}
